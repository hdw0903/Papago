{"version":3,"sources":["error/errorCodes.js","components/ImgButton.js","customhooks/UseToastify.js","data/supportLanguages.js","components/Textarea.js","components/DropdownSelectBox.js","components/PapagoAPI.js","customhooks/Usedebounce.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["papagoErrorCodes","N2MT01","N2MT02","N2MT03","N2MT04","N2MT05","N2MT06","N2MT07","N2MT08","N2MT99","CopyButton","className","onClick","src","alt","toastType","langCodes","NONE","id","title","KOREAN","ENGLISH","JAPANESE","CHINESE","CHINESE_TW","SPANISH","FRENCH","RUSSIAN","VIETNAMESE","THAI","INDONESIAN","GERMAN","ITALIAN","getTargets","excludeList","Object","values","filter","langCode","some","excludeItem","targets","TranslateContainer","placeholder","value","autoFocus","onChange","onKeyPress","readOnly","type","DropdownSelectBox","text","isResponsive","isDefault","li","optionalClassName","useMemo","PapagoAPI","useState","inputValue","setInputValue","translatedText","setTranslatedText","source","setSource","target","setTarget","delay","timer","useRef","debouncedValue","setDebouncedValue","useEffect","current","setTimeout","clearTimeout","useDebounce","clearDebounce","ToastContainer","message","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","toastNotify","autoDetect","a","axios","post","query","headers","process","detect","data","console","error","translate","sourceTargetInfo","currentSource","currentTarget","res","result","hasOwnProperty","response","errorCode","errorMessage","search","log","langsList","targetElement","setTargetElement","selectLangTitle","setSelectLangTitle","targetLangTitle","setTargetLangTitle","reduce","acc","cur","push","setState","key","getListElement","sources","getTargetElement","map","clipboardCopy","useCallback","navigator","clipboard","writeText","Textarea","e","charCode","ImgButton","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.11fd8d26.chunk.js","sourcesContent":["export const papagoErrorCodes = {\r\n  N2MT01: '🚨 source 파라미터가 필요합니다.',\r\n  N2MT02: '🚨 지원하지 않는 source 언어입니다.',\r\n  N2MT03: '🚨 target 파라미터가 필요합니다.',\r\n  N2MT04: '🚨 지원하지 않는 target 언어입니다.',\r\n  N2MT05: '🚨 선택된 언어와 번역될 언어가 동일합니다.',\r\n  N2MT06: '🚨 target 번역기가 없습니다.',\r\n  N2MT07: '🚨 텍스트를 입력해주세요.',\r\n  N2MT08: '🚨 text 파라미터가 최대 용량을 초과했습니다.',\r\n  N2MT99: '🚨 내부서버 오류입니다.',\r\n  '010': '🚨 무료API 하루 사용량을 모두 사용했습니다.',\r\n};\r\n","import React from 'react';\r\n\r\nconst CopyButton = ({ className, onClick, src, alt }) => {\r\n  return (\r\n    <button onClick={onClick}>\r\n      <img className={className} src={src} alt={alt} />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CopyButton;\r\n","import { ToastContainer, toast } from 'react-toastify';\r\n\r\nexport const toastType = {\r\n  SUCCESS: 'success',\r\n  INFO: 'info',\r\n  ERROR: 'error',\r\n};\r\n\r\nexport const useToastify = () => {\r\n  const toastNotify = (message = '', type = toastType.INFO) => {\r\n    // toast.info('🦄 복사되었습니다!', {\r\n    toast[type](message, {\r\n      position: 'bottom-right',\r\n      autoClose: 2000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: false,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n  };\r\n  return [ToastContainer, toastNotify];\r\n};\r\n","export const langCodes = {\r\n  NONE: { id: '', title: '언어 감지' },\r\n  KOREAN: { id: 'ko', title: '한국어' },\r\n  ENGLISH: { id: 'en', title: '영어' },\r\n  JAPANESE: { id: 'ja', title: '일본어' },\r\n  CHINESE: { id: 'zh-CH', title: '중국어 간체' },\r\n  CHINESE_TW: { id: 'zh-TW', title: '중국어 번체' },\r\n  SPANISH: { id: 'es', title: '스페인어' },\r\n  FRENCH: { id: 'fr', title: '프랑스어' },\r\n  RUSSIAN: { id: 'ru', title: '러시아어' },\r\n  VIETNAMESE: { id: 'vi', title: '베트남어' },\r\n  THAI: { id: 'ti', title: '태국어' },\r\n  INDONESIAN: { id: 'id', title: '인도네시아어' },\r\n  GERMAN: { id: 'de', title: '독일어' },\r\n  ITALIAN: { id: 'it', title: '이탈리아어' },\r\n};\r\n\r\nconst getTargets = (excludeList = []) => {\r\n  return Object.values(langCodes).filter((langCode) => {\r\n    return (\r\n      langCode.id !== langCodes.NONE.id &&\r\n      !excludeList.some((excludeItem) => excludeItem.id === langCode.id)\r\n    );\r\n  });\r\n};\r\n\r\n/**\r\n * 변수 이름 규칙 -> 암묵적으로\r\n * class 이름은 무조건 대문자로 시작 : class Car {}\r\n * 일반적인 값(string, number)들 : 명사로 -> 복수, 단수. (list: 복수, item: 단수)\r\n * 함수 : 동사 + 명사 : get+N , create+N, V (search) -> searchNames\r\n * boolean: is || can -> isDefault\r\n */\r\nexport default [\r\n  {\r\n    ...langCodes.NONE,\r\n    targets: getTargets(),\r\n  },\r\n  {\r\n    ...langCodes.KOREAN,\r\n    targets: getTargets(),\r\n  },\r\n  {\r\n    ...langCodes.ENGLISH,\r\n    targets: getTargets([\r\n      langCodes.SPANISH,\r\n      langCodes.RUSSIAN,\r\n      langCodes.INDONESIAN,\r\n      langCodes.GERMAN,\r\n      langCodes.ITALIAN,\r\n    ]),\r\n  },\r\n  {\r\n    ...langCodes.JAPANESE,\r\n    targets: [\r\n      langCodes.KOREAN,\r\n      langCodes.ENGLISH,\r\n      langCodes.CHINESE,\r\n      langCodes.CHINESE_TW,\r\n    ],\r\n  },\r\n  {\r\n    ...langCodes.CHINESE,\r\n    targets: [\r\n      langCodes.KOREAN,\r\n      langCodes.ENGLISH,\r\n      langCodes.JAPANESE,\r\n      langCodes.CHINESE_TW,\r\n    ],\r\n  },\r\n  {\r\n    ...langCodes.CHINESE_TW,\r\n    targets: [\r\n      langCodes.KOREAN,\r\n      langCodes.ENGLISH,\r\n      langCodes.JAPANESE,\r\n      langCodes.CHINESE,\r\n    ],\r\n  },\r\n  {\r\n    ...langCodes.SPANISH,\r\n    targets: [langCodes.KOREAN],\r\n  },\r\n  {\r\n    ...langCodes.FRENCH,\r\n    targets: [langCodes.KOREAN, langCodes.ENGLISH],\r\n  },\r\n  { ...langCodes.RUSSIAN, targets: [langCodes.KOREAN] },\r\n  {\r\n    ...langCodes.VIETNAMESE,\r\n    targets: [langCodes.KOREAN, langCodes.ENGLISH],\r\n  },\r\n  {\r\n    ...langCodes.THAI,\r\n    targets: [langCodes.KOREAN, langCodes.ENGLISH],\r\n  },\r\n  {\r\n    ...langCodes.INDONESIAN,\r\n    targets: [langCodes.KOREAN],\r\n  },\r\n  {\r\n    ...langCodes.GERMAN,\r\n    targets: [langCodes.KOREAN],\r\n  },\r\n  {\r\n    ...langCodes.ITALIAN,\r\n    targets: [langCodes.KOREAN],\r\n  },\r\n];\r\n//canTarget: ['ko', 'en','ja','zh-CN','zh-TW','ex','fr','ru','vi','th','id','de',''it]\r\n/*  en = [\r\n     {id: 'ko', title: \"한국어\"},\r\n     {id: 'ja', title: \"일본어\"},\r\n     {id: 'zh-CN', title: \"중국어(간체)\"},\r\n     {id: 'zh-TW', title: \"중국어 번체\"},\r\n     {id: 'fr', title: \"프랑스어\"},\r\n     {id: 'vi', title: \"베트남어\"},\r\n     {id: 'th', title: \"태국어\"},\r\n]\r\n  ja = [\r\n    { id: 'ko', title: '한국어' },\r\n  { id: 'en', title: '영어' },\r\n  { id: 'zh-CN', title: '중국어(간체)' },\r\n  { id: 'zh-TW', title: '중국어(번체)' },\r\n ]\r\n  zh-Ch = [\r\n     {id: 'ko', title:\"한국어\"},\r\n  { id: 'en', title: '영어' },\r\n\r\n     {id: 'ja', title: \"일본어\"},\r\n     {id: 'zh-TW', title: \"중국어(번체)\"},\r\n ]\r\n  zh-TW = [\r\n       { id: 'ko', title: '한국어' },\r\n  { id: 'en', title: '영어' },\r\n  { id: 'ja', title: '일본어' },\r\n  { id: 'zh-CN', title: '중국어(간체)' },\r\n ]\r\n  es = [\r\n       { id: 'ko', title: '한국어' },\r\n  { id: 'en', title: '영어' },\r\n  ]\r\n   \r\n   fr= [{ id: 'ko', title: '한국어' },\r\n  { id: 'en', title: '영어' },]\r\n  ru =[\r\n      {id:'ko', title: '한국어'}\r\n  ]\r\n   vi= [{ id: 'ko', title: '한국어' },\r\n  { id: 'en', title: '영어' },]\r\n   th= [{ id: 'ko', title: '한국어' },\r\n  { id: 'en', title: '영어' },]\r\n   id= [{ id: 'ko', title: '한국어' },\r\n  ]\r\n   de= [{ id: 'ko', title: '한국어' }]\r\n   it= [{ id: 'ko', title: '한국어' }]\r\n\r\n*/\r\n","import React from 'react';\r\n\r\nconst TranslateContainer = ({\r\n  className,\r\n  placeholder,\r\n  value,\r\n  autoFocus = false,\r\n  onChange,\r\n  onKeyPress,\r\n  readOnly = false,\r\n  type,\r\n}) => {\r\n  //   const onChangeInput = (e) => {\r\n  //     console.log(e);\r\n  //     setInputValue(e.target.value);\r\n  //   };\r\n  //   const search = () => {2\r\n  //     clearDebounce();\r\n  //   };\r\n  return (\r\n    <textarea\r\n      className={className}\r\n      placeholder={placeholder}\r\n      type={type}\r\n      value={value}\r\n      onChange={onChange}\r\n      onKeyPress={onKeyPress}\r\n      autoFocus={autoFocus}\r\n      readOnly={readOnly}\r\n    />\r\n    /* <div className=\"menu_button\">\r\n        <CopyButton text={inputValue} toastNotify={toastNotify} />\r\n        <button onClick={search}>\r\n          <img\r\n            className=\"button_img\"\r\n            src={process.env.PUBLIC_URL + '/img/enter_icon.png'}\r\n            alt=\"번역 버튼\"\r\n          />\r\n        </button>\r\n      </div> */\r\n  );\r\n};\r\n\r\nexport default TranslateContainer;\r\n","import React from 'react';\r\nimport { useMemo } from 'react';\r\n\r\nconst DropdownSelectBox = ({\r\n  text,\r\n  isResponsive = false,\r\n  isDefault = false,\r\n  li,\r\n}) => {\r\n  const optionalClassName = useMemo(\r\n    () => `${isResponsive && 'responsive'} ${isDefault && 'default'}`,\r\n    [isResponsive, isDefault]\r\n  );\r\n\r\n  return (\r\n    <div className={`dropdown_lang ${optionalClassName}`}>\r\n      <span className={`dropdown_text ${optionalClassName}`}>{text}</span>\r\n      <ul className={`dropdown_lang_select ${optionalClassName}`}>{li}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DropdownSelectBox;\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport useDebounce from '../customhooks/Usedebounce';\r\nimport { papagoErrorCodes } from '../error/errorCodes';\r\nimport './PapagoAPI.css';\r\nimport ImgButton from './ImgButton';\r\nimport { useToastify, toastType } from '../customhooks/UseToastify';\r\nimport langsList from '../data/supportLanguages';\r\nimport Textarea from './Textarea';\r\nimport { useCallback } from 'react';\r\nimport DropdownSelectBox from './DropdownSelectBox';\r\n\r\nconst PapagoAPI = () => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [translatedText, setTranslatedText] = useState('');\r\n  const [source, setSource] = useState('');\r\n  const [target, setTarget] = useState('ko');\r\n  const [debouncedValue, clearDebounce] = useDebounce(inputValue, 300);\r\n  const [ToastContainer, toastNotify] = useToastify();\r\n\r\n  const autoDetect = useMemo(() => {\r\n    return async () => {\r\n      try {\r\n        const detect = await axios.post(\r\n          '/v1/papago/detectLangs',\r\n          { query: debouncedValue },\r\n          {\r\n            headers: {\r\n              'X-Naver-Client-Id': process.env.REACT_APP_PAPAGO_CLIENT_ID,\r\n              'X-Naver-Client-Secret':\r\n                process.env.REACT_APP_PAPAGO_CLIENT_SECRET,\r\n            },\r\n          }\r\n        );\r\n        let source, target;\r\n        if (detect.data.langCode !== 'ko') {\r\n          source = detect.data.langCode;\r\n          target = 'ko';\r\n        } else {\r\n          source = 'ko';\r\n          target = 'en';\r\n        }\r\n\r\n        return { source, target };\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n  }, [debouncedValue]);\r\n  const translate = useMemo(() => {\r\n    return async (sourceTargetInfo) => {\r\n      const currentSource = sourceTargetInfo ? sourceTargetInfo.source : source;\r\n      const currentTarget = sourceTargetInfo ? sourceTargetInfo.target : target;\r\n      try {\r\n        const res = await axios.post(\r\n          '/v1/papago/n2mt',\r\n          {\r\n            source: currentSource,\r\n            target: currentTarget,\r\n            text: debouncedValue,\r\n          },\r\n          {\r\n            headers: {\r\n              'X-Naver-Client-Id': process.env.REACT_APP_PAPAGO_CLIENT_ID,\r\n              'X-Naver-Client-Secret':\r\n                process.env.REACT_APP_PAPAGO_CLIENT_SECRET,\r\n            },\r\n          }\r\n        );\r\n        setTranslatedText(res.data.message.result.translatedText);\r\n      } catch (e) {\r\n        if (papagoErrorCodes.hasOwnProperty(e.response.data.errorCode)) {\r\n          toastNotify(\r\n            papagoErrorCodes[e.response.data.errorCode],\r\n            toastType.ERROR\r\n          );\r\n        } else {\r\n          toastNotify(e.response.data.errorMessage, toastType.ERROR);\r\n          console.error(e.response);\r\n        }\r\n      }\r\n    };\r\n  }, [debouncedValue, source, target, toastNotify]);\r\n\r\n  useEffect(() => {\r\n    if (debouncedValue) {\r\n      if (!source) {\r\n        (async () => {\r\n          const sourceTargetInfo = await autoDetect();\r\n          translate(sourceTargetInfo);\r\n        })();\r\n      } else {\r\n        translate();\r\n      }\r\n    } else {\r\n      setTranslatedText('');\r\n    }\r\n  }, [debouncedValue, translate, autoDetect, source, target]);\r\n\r\n  const onChangeInput = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const onKeyPress = (e) => {\r\n    if (e.charCode === 13) {\r\n      search();\r\n      console.log('엔터 눌림');\r\n    }\r\n  };\r\n  const search = () => {\r\n    clearDebounce();\r\n    console.log('클리어 디바운스 실행됨');\r\n  };\r\n  // 반응형 드롭다운\r\n\r\n  const [targetElement, setTargetElement] = useState(langsList[0].targets);\r\n  const [selectLangTitle, setSelectLangTitle] = useState('언어 감지');\r\n  const [targetLangTitle, setTargetLangTitle] = useState('언어 감지');\r\n  const getListElement = ({ id, title, targets }, setState) => (\r\n    <li\r\n      key={id}\r\n      onClick={() => {\r\n        setState(id);\r\n        setTargetElement(targets);\r\n        setSelectLangTitle(title);\r\n      }}\r\n    >\r\n      <p>{title}</p>\r\n    </li>\r\n  );\r\n  const { source: sources = [] } = useMemo(() => {\r\n    return langsList.reduce(\r\n      (acc, cur) => {\r\n        acc.source.push(getListElement(cur, setSource));\r\n        return acc;\r\n      },\r\n      {\r\n        source: [],\r\n      }\r\n    );\r\n  }, []);\r\n  const getTargetElement = targetElement.map((target) => {\r\n    return (\r\n      <li\r\n        key={target.id}\r\n        onClick={() => {\r\n          setTarget(target.id);\r\n          setTargetLangTitle(target.title);\r\n        }}\r\n      >\r\n        <p>{target.title}</p>\r\n      </li>\r\n    );\r\n  });\r\n  const clipboardCopy = useCallback(\r\n    (text) => {\r\n      return () => {\r\n        navigator.clipboard.writeText(text);\r\n        toastNotify('🦄 복사되었습니다!');\r\n      };\r\n    },\r\n    [toastNotify]\r\n  );\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"translate_lang\">\r\n          <div className=\"dropdown_position_responsive\">\r\n            <DropdownSelectBox\r\n              text={`선택된 언어 : ${selectLangTitle}`}\r\n              li={sources}\r\n            />\r\n            <DropdownSelectBox\r\n              text={`번역될 언어 : ${targetLangTitle}`}\r\n              isResponsive\r\n              li={getTargetElement}\r\n            />\r\n          </div>\r\n          <div className=\"translate_form\">\r\n            <Textarea\r\n              className=\"translate_textarea\"\r\n              placeholder=\"번역할 텍스트\"\r\n              type=\"text\"\r\n              value={inputValue}\r\n              onChange={onChangeInput}\r\n              onKeyPress={onKeyPress}\r\n              autoFocus\r\n            />\r\n            <div className=\"menu_button\">\r\n              <ImgButton\r\n                onClick={clipboardCopy(inputValue)}\r\n                className=\"button_img\"\r\n                src={process.env.PUBLIC_URL + '/img/copy_icon.png'}\r\n                alt=\"복사 아이콘\"\r\n              />\r\n              <ImgButton\r\n                onClick={search}\r\n                className=\"button_img\"\r\n                src={process.env.PUBLIC_URL + '/img/enter_icon.png'}\r\n                alt=\"번역 버튼\"\r\n              />\r\n            </div>\r\n            <Textarea\r\n              className=\"translated_textarea responsive\"\r\n              placeholder=\"번역된 텍스트\"\r\n              value={translatedText}\r\n              readOnly\r\n            />\r\n            <div className=\"menu_button responsive\">\r\n              <ImgButton\r\n                onClick={clipboardCopy(translatedText)}\r\n                className=\"button_img\"\r\n                src={process.env.PUBLIC_URL + '/img/copy_icon.png'}\r\n                alt=\"복사 아이콘\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"translated_lang default\">\r\n          <DropdownSelectBox text=\"번역될 언어\" isDefault />\r\n          <Textarea\r\n            className=\"translated_textarea\"\r\n            placeholder=\"번역된 텍스트\"\r\n            value={translatedText}\r\n            readOnly\r\n          />\r\n          <div className=\"menu_button\">\r\n            <ImgButton\r\n              onClick={clipboardCopy(translatedText)}\r\n              className=\"button_img\"\r\n              src={process.env.PUBLIC_URL + '/img/copy_icon.png'}\r\n              alt=\"복사 아이콘\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PapagoAPI;\r\n","import { useState, useEffect, useRef } from 'react';\r\n\r\nexport default function useDebounce(value, delay) {\r\n  const timer = useRef(null);\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    timer.current = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(timer.current);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  const clearDebounce = () => {\r\n    if (timer.current) {\r\n      clearTimeout(timer.current);\r\n      setDebouncedValue(value);\r\n    }\r\n  };\r\n\r\n  return [debouncedValue, clearDebounce];\r\n}\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <div id=\"header\">\r\n        <img\r\n          src={process.env.PUBLIC_URL + '/img/header_img.png'}\r\n          alt=\"헤더 이미지\"\r\n        />\r\n        <p>네이버 파파고API를 이용해 만든 번역 웹입니다.</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport './App.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport PapagoAPI from './components/PapagoAPI';\nimport Header from './components/Header';\nfunction App() {\n  return (\n    <>\n      <Header />\n      <PapagoAPI />\n\n      {/* <div>\n        한국어(ko)-영어(en) <br />\n        한국어(ko)-일본어(ja), <br />\n        한국어(ko)-중국어 간체(zh-CN),\n        <br />\n        한국어(ko)-중국어 번체(zh-TW),\n        <br />\n        한국어(ko)-스페인어(es),\n        <br />\n        한국어(ko)-프랑스어(fr),\n        <br />\n        한국어(ko)-러시아어(ru),\n        <br />\n        한국어(ko)-베트남어(vi),\n        <br />\n        한국어(ko)-태국어(th),\n        <br />\n        한국어(ko)-인도네시아어(id),\n        <br />\n        한국어(ko)-독일어(de),\n        <br />\n        한국어(ko)-이탈리아어(it),\n        <br />\n        중국어 간체(zh-CN) - 중국어 번체(zh-TW),\n        <br />\n        중국어 간체(zh-CN) - 일본어(ja),\n        <br />\n        중국어 번체(zh-TW) - 일본어(ja),\n        <br />\n        영어(en)-일본어(ja),\n        <br />\n        영어(en)-중국어 간체(zh-CN),\n        <br />\n        영어(en)-중국어 번체(zh-TW), <br />\n        영어(en)-프랑스어(fr)를 지원합니다.\n        <br />\n      </div> */}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}