{"version":3,"sources":["components/PapagoAPI.js","App.js","serviceWorker.js","index.js"],"names":["PapagoAPI","useState","value","setValue","a","axios","method","Host","url","headers","Accept","process","REACT_APP_PAPAGO_CLIENT_ID","REACT_APP_PAPAGO_CLIENT_SECRET","data","source","targrt","text","console","error","getPost","className","onSubmit","e","preventDefault","placeholder","type","autoFocus","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0RAsEeA,EAnEG,WAAO,IAAD,EACIC,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,MAwBT,uCAAG,sBAAAC,EAAA,+EAENC,IAAM,CACVC,OAAQ,OACRC,KAAM,oBACNC,IAAK,kBACLC,QAAS,CACP,8BAA+B,IAC/B,eAAgB,mDAChBC,OAAQ,MACR,oBAAqBC,0HAAYC,2BACjC,wBAAyBD,0HAAYE,gCAEvCC,KAAM,CAAEC,OAAQ,KAAMC,OAAQ,KAAMC,KAAMf,KAbhC,sDAgBZgB,QAAQC,QAhBI,wDAAH,qDAmBbC,GAOA,OACE,6BACE,0BAAMC,UAAU,iBAAiBC,SARpB,SAACC,GAChBA,EAAEC,mBAQE,2BACEC,YAAY,wCACZC,KAAK,OACLC,WAAS,EACTzB,MAAOA,EACP0B,SAXc,SAACL,GACrBpB,EAASoB,EAAEM,OAAO3B,UAYd,iDAEF,yBAAKmB,UAAU,cAAf,4CCrDSS,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACLD,QAAQC,MAAMA,EAAM6B,c","file":"static/js/main.5af79b61.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst PapagoAPI = () => {\r\n  const [value, setValue] = useState('');\r\n  // const data = {\r\n  //   source: 'en',\r\n  //   targrt: 'ko',\r\n  //   text: value,\r\n  // };\r\n  // const headers = {\r\n  //   'Access-Control-Allow-Origin': '*',\r\n  //   'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n  //   Accept: '*/*',\r\n  //   'X-Naver-Client-Id': process.env.REACT_APP_PAPAGO_CLIENT_ID,\r\n  //   'X-Naver-Client-Secret': process.env.REACT_APP_PAPAGO_CLIENT_SECRET,\r\n  // };\r\n  // const getPost = async () => {\r\n  //   try {\r\n  //     await axios.post('http://openapi.naver.com/v1/papago/n2mt', data, {\r\n  //       headers: headers,\r\n  //     });\r\n  //   } catch {\r\n  //     console.error();\r\n  //   }\r\n  // };\r\n  // getPost();\r\n  const getPost = async () => {\r\n    try {\r\n      await axios({\r\n        method: 'POST',\r\n        Host: 'openapi.naver.com',\r\n        url: '/v1/papago/n2mt',\r\n        headers: {\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n          Accept: '*/*',\r\n          'X-Naver-Client-Id': process.env.REACT_APP_PAPAGO_CLIENT_ID,\r\n          'X-Naver-Client-Secret': process.env.REACT_APP_PAPAGO_CLIENT_SECRET,\r\n        },\r\n        data: { source: 'en', targrt: 'ko', text: value },\r\n      });\r\n    } catch {\r\n      console.error();\r\n    }\r\n  };\r\n  getPost();\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n  };\r\n  const onChangeInput = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"translate-form\" onSubmit={onSubmit}>\r\n        <input\r\n          placeholder=\"번역할 텍스트\"\r\n          type=\"text\"\r\n          autoFocus\r\n          value={value}\r\n          onChange={onChangeInput}\r\n        />\r\n        <button>번역</button>\r\n      </form>\r\n      <div className=\"translated\">번역된 텍스트 </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PapagoAPI;\r\n","import React from 'react';\nimport './App.css';\nimport PapagoAPI from './components/PapagoAPI';\n\nfunction App() {\n  return (\n    <>\n      <PapagoAPI />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}